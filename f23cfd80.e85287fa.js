(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{79:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(2),r=a(6),i=(a(0),a(89)),c={id:"Either",title:"Either",sidebar_label:"Either"},b={unversionedId:"Either",id:"Either",isDocsHomePage:!1,title:"Either",description:"Either represents a computation that can succeed with a value R or fail with a value E. Either allows chaining, via the flatMap method, of successive computations that may fail. This enables centralised error handling in a typesafe way.",source:"@site/docs/Either.md",slug:"/Either",permalink:"/light-arrow-docs/docs/Either",editUrl:"https://github.com/lauri3new/light-arrow-docs/tree/master/docs/Either.md",version:"current",sidebar_label:"Either",sidebar:"someSidebar",previous:{title:"Arrow",permalink:"/light-arrow-docs/docs/Arrow"},next:{title:"HttpApp",permalink:"/light-arrow-docs/docs/HttpApp"}},l=[],o={rightToc:l};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Either represents a computation that can succeed with a value R or fail with a value E. Either allows chaining, via the flatMap method, of successive computations that may fail. This enables centralised error handling in a typesafe way."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"export interface Either<E, R> {\n  _tag: string\n  get: () => E | R\n  map:<R2>(f:(_: R) => R2) => Either<E, R2>\n  leftMap:<E2>(f:(_: E) => E2) => Either<E2, R>\n  biMap:<E2, R2>(f:(_:E) => E2, g:(_:R) => R2) => Either<E2, R2>\n  flatMap:<E2, R2>(f:(_: R) => Either<E | E2, R2>) => Either<E | E2, R2>\n  match:<R2, E2>(f:(_:E) => E2, g:(_:R) => R2) => E2 | R2\n}\n\nexport type Right<R> = Either<never, R>\nexport type Left<E> = Either<E, never>\n")),Object(i.b)("p",null,"Example usage"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { Either, Right, Left } from 'Light-Arrow/either'\n\nconst safeDivide = (n: number, n2: number): Either<string, number> => (\n  n2 === 0 ? Left('quotient was 0') : Right(n / n2)\n)\n\nconst myResult = safeDivide(Math.random(), Math.random() - 0.5)\n  .map(n => n * 100 - 56)\n  .flatMap(n => safeDivide(n, Math.random() - 0.5))\n  .leftMap(s => `This computation failed because: ${s}`)\n  .match(\n    failMessage => console.log(failMessage),\n    result => console.log(result)\n  )\n\n")),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Interface"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"Either<E, R>")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Either represents a computation that can succeed with a value R or fail with a value E.")))),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Functions"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Either"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"Either<E, R>"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Right"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"<R>(a: R):Right<R>"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Left"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(i.b)("inlineCode",{parentName:"td"},"<E>(a: E):Left<E>"))))))}s.isMDXComponent=!0}}]);