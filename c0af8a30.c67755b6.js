(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{105:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return d}));var a=n(1),r=n(6),b=(n(0),n(118)),o={id:"HttpApp",title:"HttpApp",sidebar_label:"HttpApp"},p={id:"HttpApp",title:"HttpApp",description:"An HttpApp is simply ```(ctx: Context) => Promise<Result>```. To help with type safety and composability we can define HttpRoutes as ```Arrow<A, notFound | Result, Result>``` where A extends Context. Middlewares can be defined as ```Arrow<A, notFound | Result, Context>```. We can combine httpRoutes together (similar to how we would use an express Router) using the Arrow combine function in a type safe manner. We can also compose middleware together using the Arrow ```andThen``` method.",source:"@site/docs/HttpApp.md",permalink:"/light-arrow-docs/docs/HttpApp",editUrl:"https://github.com/lauri3new/light-arrow-docs/tree/master/docs/HttpApp.md",sidebar_label:"HttpApp",sidebar:"someSidebar",previous:{title:"Either",permalink:"/light-arrow-docs/docs/Either"},next:{title:"Result",permalink:"/light-arrow-docs/docs/Result"}},i=[],c={rightToc:i};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"An HttpApp is simply ",Object(b.b)("inlineCode",{parentName:"p"},"(ctx: Context) => Promise<Result>"),". To help with type safety and composability we can define HttpRoutes as ",Object(b.b)("inlineCode",{parentName:"p"},"Arrow<A, notFound | Result, Result>")," where A extends Context. Middlewares can be defined as ",Object(b.b)("inlineCode",{parentName:"p"},"Arrow<A, notFound | Result, Context>"),". We can combine httpRoutes together (similar to how we would use an express Router) using the Arrow combine function in a type safe manner. We can also compose middleware together using the Arrow ",Object(b.b)("inlineCode",{parentName:"p"},"andThen")," method."),Object(b.b)("p",null,"Example usage"),Object(b.b)("pre",null,Object(b.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"\n\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Interfaces and enums"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"<Context>")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"{ req: Request }"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"notFound")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"{ path: string, method: string }"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"HttpMethods")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"enum of http methods"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"httpRoutes")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"Arrow<A, notFound / Result, Result>")," where A extends Context")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"httpApp")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),Object(b.b)("inlineCode",{parentName:"td"},"(ctx: Context) => Promise<Result>"))))),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Functions"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:"left"}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"get, post, patch, put, delete"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"functions that filter the matching of an incoming request by method and a supplied path string, returning an Arrow of type ",Object(b.b)("inlineCode",{parentName:"td"},"Arrow<A, notFound, Result>")," where A extends Context")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"bindApp"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"used to attach the http app to an express app instance ",Object(b.b)("inlineCode",{parentName:"td"},"bindApp<A = {}>(a: Arrow<A & Context, Result, Result>,onError: (e?: Error) => Result,dependencies: A) => (expressApp: Express):void"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"runResponse"),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:"left"}),"internally used by bindApp ",Object(b.b)("inlineCode",{parentName:"td"},"runResponse(res: Response, result: Result): void")," sends an http response from a result using the express response object")))))}d.isMDXComponent=!0}}]);